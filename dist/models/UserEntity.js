"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Sofia Pegasus ai-api
 * Api do sistema Pegasus com endpoints para interação com os modelos de AI usados no sistema.
 *
 * The version of the OpenAPI document: 1.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.instanceOfUserEntity = instanceOfUserEntity;
exports.UserEntityFromJSON = UserEntityFromJSON;
exports.UserEntityFromJSONTyped = UserEntityFromJSONTyped;
exports.UserEntityToJSON = UserEntityToJSON;
exports.UserEntityToJSONTyped = UserEntityToJSONTyped;
var UserEntityAvailableOrganizationsInner_1 = require("./UserEntityAvailableOrganizationsInner");
/**
 * Check if a given object implements the UserEntity interface.
 */
function instanceOfUserEntity(value) {
    if (!('id' in value) || value['id'] === undefined)
        return false;
    if (!('mainId' in value) || value['mainId'] === undefined)
        return false;
    if (!('firstName' in value) || value['firstName'] === undefined)
        return false;
    if (!('lastName' in value) || value['lastName'] === undefined)
        return false;
    if (!('availableOrganizations' in value) || value['availableOrganizations'] === undefined)
        return false;
    return true;
}
function UserEntityFromJSON(json) {
    return UserEntityFromJSONTyped(json, false);
}
function UserEntityFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'id': json['id'],
        'mainId': json['mainId'],
        'firstName': json['firstName'],
        'lastName': json['lastName'],
        'email': json['email'] == null ? undefined : json['email'],
        'phone': json['phone'] == null ? undefined : json['phone'],
        'avatarUrl': json['avatarUrl'] == null ? undefined : json['avatarUrl'],
        'availableOrganizations': (json['availableOrganizations'].map(UserEntityAvailableOrganizationsInner_1.UserEntityAvailableOrganizationsInnerFromJSON)),
        'selectedOrganizationId': json['selectedOrganizationId'] == null ? undefined : json['selectedOrganizationId'],
    };
}
function UserEntityToJSON(json) {
    return UserEntityToJSONTyped(json, false);
}
function UserEntityToJSONTyped(value, ignoreDiscriminator) {
    if (ignoreDiscriminator === void 0) { ignoreDiscriminator = false; }
    if (value == null) {
        return value;
    }
    return {
        'id': value['id'],
        'mainId': value['mainId'],
        'firstName': value['firstName'],
        'lastName': value['lastName'],
        'email': value['email'],
        'phone': value['phone'],
        'avatarUrl': value['avatarUrl'],
        'availableOrganizations': (value['availableOrganizations'].map(UserEntityAvailableOrganizationsInner_1.UserEntityAvailableOrganizationsInnerToJSON)),
        'selectedOrganizationId': value['selectedOrganizationId'],
    };
}
