"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Sofia Pegasus ai-api
 * Api do sistema Pegasus com endpoints para interação com os modelos de AI usados no sistema.
 *
 * The version of the OpenAPI document: 1.0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.AgentRequestBodyDtoMessageContextChannelEnum = void 0;
exports.instanceOfAgentRequestBodyDtoMessageContext = instanceOfAgentRequestBodyDtoMessageContext;
exports.AgentRequestBodyDtoMessageContextFromJSON = AgentRequestBodyDtoMessageContextFromJSON;
exports.AgentRequestBodyDtoMessageContextFromJSONTyped = AgentRequestBodyDtoMessageContextFromJSONTyped;
exports.AgentRequestBodyDtoMessageContextToJSON = AgentRequestBodyDtoMessageContextToJSON;
exports.AgentRequestBodyDtoMessageContextToJSONTyped = AgentRequestBodyDtoMessageContextToJSONTyped;
var GenerateBestSuggestedActionRequestBodyDtoMessageContextCurrentMessage_1 = require("./GenerateBestSuggestedActionRequestBodyDtoMessageContextCurrentMessage");
/**
 * @export
 */
exports.AgentRequestBodyDtoMessageContextChannelEnum = {
    Whatsapp: 'whatsapp',
    Email: 'email'
};
/**
 * Check if a given object implements the AgentRequestBodyDtoMessageContext interface.
 */
function instanceOfAgentRequestBodyDtoMessageContext(value) {
    if (!('chatId' in value) || value['chatId'] === undefined)
        return false;
    if (!('channel' in value) || value['channel'] === undefined)
        return false;
    if (!('currentMessage' in value) || value['currentMessage'] === undefined)
        return false;
    if (!('lastMessages' in value) || value['lastMessages'] === undefined)
        return false;
    return true;
}
function AgentRequestBodyDtoMessageContextFromJSON(json) {
    return AgentRequestBodyDtoMessageContextFromJSONTyped(json, false);
}
function AgentRequestBodyDtoMessageContextFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'chatId': json['chatId'],
        'chatTitle': json['chatTitle'] == null ? undefined : json['chatTitle'],
        'channel': json['channel'],
        'currentMessage': (0, GenerateBestSuggestedActionRequestBodyDtoMessageContextCurrentMessage_1.GenerateBestSuggestedActionRequestBodyDtoMessageContextCurrentMessageFromJSON)(json['currentMessage']),
        'lastMessages': (json['lastMessages'].map(GenerateBestSuggestedActionRequestBodyDtoMessageContextCurrentMessage_1.GenerateBestSuggestedActionRequestBodyDtoMessageContextCurrentMessageFromJSON)),
    };
}
function AgentRequestBodyDtoMessageContextToJSON(json) {
    return AgentRequestBodyDtoMessageContextToJSONTyped(json, false);
}
function AgentRequestBodyDtoMessageContextToJSONTyped(value, ignoreDiscriminator) {
    if (ignoreDiscriminator === void 0) { ignoreDiscriminator = false; }
    if (value == null) {
        return value;
    }
    return {
        'chatId': value['chatId'],
        'chatTitle': value['chatTitle'],
        'channel': value['channel'],
        'currentMessage': (0, GenerateBestSuggestedActionRequestBodyDtoMessageContextCurrentMessage_1.GenerateBestSuggestedActionRequestBodyDtoMessageContextCurrentMessageToJSON)(value['currentMessage']),
        'lastMessages': (value['lastMessages'].map(GenerateBestSuggestedActionRequestBodyDtoMessageContextCurrentMessage_1.GenerateBestSuggestedActionRequestBodyDtoMessageContextCurrentMessageToJSON)),
    };
}
