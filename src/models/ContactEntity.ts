/* tslint:disable */
/* eslint-disable */
/**
 * Sofia Pegasus ai-api
 * Api do sistema Pegasus com endpoints para interação com os modelos de AI usados no sistema.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ContactEntityAddress } from './ContactEntityAddress';
import {
    ContactEntityAddressFromJSON,
    ContactEntityAddressFromJSONTyped,
    ContactEntityAddressToJSON,
    ContactEntityAddressToJSONTyped,
} from './ContactEntityAddress';

/**
 * 
 * @export
 * @interface ContactEntity
 */
export interface ContactEntity {
    /**
     * Nome do contato.
     * @type {string}
     * @memberof ContactEntity
     */
    name: string;
    /**
     * Tipos do contato.
     * @type {Array<string>}
     * @memberof ContactEntity
     */
    types?: Array<ContactEntityTypesEnum>;
    /**
     * Tipo do documento do contato (CPF ou CNPJ).
     * @type {string}
     * @memberof ContactEntity
     */
    documentType?: ContactEntityDocumentTypeEnum | null;
    /**
     * Documento do contato (valor do CPF ou CNPJ).
     * @type {string}
     * @memberof ContactEntity
     */
    document?: string | null;
    /**
     * Email do contato.
     * @type {string}
     * @memberof ContactEntity
     */
    email?: string | null;
    /**
     * Telefone do contato.
     * @type {string}
     * @memberof ContactEntity
     */
    phone?: string | null;
    /**
     * Chaves pix do contato.
     * @type {Array<string>}
     * @memberof ContactEntity
     */
    pixKeys?: Array<string>;
    /**
     * Origem do contato.
     * @type {string}
     * @memberof ContactEntity
     */
    origin?: ContactEntityOriginEnum | null;
    /**
     * 
     * @type {ContactEntityAddress}
     * @memberof ContactEntity
     */
    address?: ContactEntityAddress | null;
}


/**
 * @export
 */
export const ContactEntityTypesEnum = {
    Customer: 'CUSTOMER',
    Employee: 'EMPLOYEE',
    Supplier: 'SUPPLIER',
    Partner: 'PARTNER'
} as const;
export type ContactEntityTypesEnum = typeof ContactEntityTypesEnum[keyof typeof ContactEntityTypesEnum];

/**
 * @export
 */
export const ContactEntityDocumentTypeEnum = {
    Cnpj: 'CNPJ',
    Cpf: 'CPF'
} as const;
export type ContactEntityDocumentTypeEnum = typeof ContactEntityDocumentTypeEnum[keyof typeof ContactEntityDocumentTypeEnum];

/**
 * @export
 */
export const ContactEntityOriginEnum = {
    Indication: 'INDICATION',
    Ads: 'ADS',
    OrganicSearch: 'ORGANIC_SEARCH',
    SocialMedia: 'SOCIAL_MEDIA',
    Events: 'EVENTS',
    Partnerships: 'PARTNERSHIPS',
    PhysicalStore: 'PHYSICAL_STORE',
    Other: 'OTHER'
} as const;
export type ContactEntityOriginEnum = typeof ContactEntityOriginEnum[keyof typeof ContactEntityOriginEnum];


/**
 * Check if a given object implements the ContactEntity interface.
 */
export function instanceOfContactEntity(value: object): value is ContactEntity {
    if (!('name' in value) || value['name'] === undefined) return false;
    return true;
}

export function ContactEntityFromJSON(json: any): ContactEntity {
    return ContactEntityFromJSONTyped(json, false);
}

export function ContactEntityFromJSONTyped(json: any, ignoreDiscriminator: boolean): ContactEntity {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'],
        'types': json['types'] == null ? undefined : json['types'],
        'documentType': json['documentType'] == null ? undefined : json['documentType'],
        'document': json['document'] == null ? undefined : json['document'],
        'email': json['email'] == null ? undefined : json['email'],
        'phone': json['phone'] == null ? undefined : json['phone'],
        'pixKeys': json['pixKeys'] == null ? undefined : json['pixKeys'],
        'origin': json['origin'] == null ? undefined : json['origin'],
        'address': json['address'] == null ? undefined : ContactEntityAddressFromJSON(json['address']),
    };
}

export function ContactEntityToJSON(json: any): ContactEntity {
    return ContactEntityToJSONTyped(json, false);
}

export function ContactEntityToJSONTyped(value?: ContactEntity | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'types': value['types'],
        'documentType': value['documentType'],
        'document': value['document'],
        'email': value['email'],
        'phone': value['phone'],
        'pixKeys': value['pixKeys'],
        'origin': value['origin'],
        'address': ContactEntityAddressToJSON(value['address']),
    };
}

