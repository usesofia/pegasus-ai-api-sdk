/* tslint:disable */
/* eslint-disable */
/**
 * Sofia Pegasus ai-api
 * Api do sistema Pegasus com endpoints para interação com os modelos de AI usados no sistema.
 *
 * The version of the OpenAPI document: 1.8.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { UserEntityAvailableOrganizationsInner } from './UserEntityAvailableOrganizationsInner';
import {
    UserEntityAvailableOrganizationsInnerFromJSON,
    UserEntityAvailableOrganizationsInnerFromJSONTyped,
    UserEntityAvailableOrganizationsInnerToJSON,
    UserEntityAvailableOrganizationsInnerToJSONTyped,
} from './UserEntityAvailableOrganizationsInner';

/**
 * 
 * @export
 * @interface UserEntity
 */
export interface UserEntity {
    /**
     * Identificador do usuário no banco de dados.
     * @type {string}
     * @memberof UserEntity
     */
    id: string;
    /**
     * Identificador do usuário no clerk.
     * @type {string}
     * @memberof UserEntity
     */
    mainId: string;
    /**
     * Nome do usuário.
     * @type {string}
     * @memberof UserEntity
     */
    firstName: string;
    /**
     * Sobrenome do usuário.
     * @type {string}
     * @memberof UserEntity
     */
    lastName: string;
    /**
     * Email do usuário.
     * @type {string}
     * @memberof UserEntity
     */
    email?: string | null;
    /**
     * Telefone do usuário.
     * @type {string}
     * @memberof UserEntity
     */
    phone?: string | null;
    /**
     * URL do avatar do usuário.
     * @type {string}
     * @memberof UserEntity
     */
    avatarUrl?: string | null;
    /**
     * Organizações disponíveis para o usuário.
     * @type {Array<UserEntityAvailableOrganizationsInner>}
     * @memberof UserEntity
     */
    availableOrganizations: Array<UserEntityAvailableOrganizationsInner>;
    /**
     * Identificador da organização selecionada pelo usuário.
     * @type {string}
     * @memberof UserEntity
     */
    selectedOrganizationId?: string | null;
}

/**
 * Check if a given object implements the UserEntity interface.
 */
export function instanceOfUserEntity(value: object): value is UserEntity {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('mainId' in value) || value['mainId'] === undefined) return false;
    if (!('firstName' in value) || value['firstName'] === undefined) return false;
    if (!('lastName' in value) || value['lastName'] === undefined) return false;
    if (!('availableOrganizations' in value) || value['availableOrganizations'] === undefined) return false;
    return true;
}

export function UserEntityFromJSON(json: any): UserEntity {
    return UserEntityFromJSONTyped(json, false);
}

export function UserEntityFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserEntity {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'mainId': json['mainId'],
        'firstName': json['firstName'],
        'lastName': json['lastName'],
        'email': json['email'] == null ? undefined : json['email'],
        'phone': json['phone'] == null ? undefined : json['phone'],
        'avatarUrl': json['avatarUrl'] == null ? undefined : json['avatarUrl'],
        'availableOrganizations': ((json['availableOrganizations'] as Array<any>).map(UserEntityAvailableOrganizationsInnerFromJSON)),
        'selectedOrganizationId': json['selectedOrganizationId'] == null ? undefined : json['selectedOrganizationId'],
    };
}

export function UserEntityToJSON(json: any): UserEntity {
    return UserEntityToJSONTyped(json, false);
}

export function UserEntityToJSONTyped(value?: UserEntity | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'mainId': value['mainId'],
        'firstName': value['firstName'],
        'lastName': value['lastName'],
        'email': value['email'],
        'phone': value['phone'],
        'avatarUrl': value['avatarUrl'],
        'availableOrganizations': ((value['availableOrganizations'] as Array<any>).map(UserEntityAvailableOrganizationsInnerToJSON)),
        'selectedOrganizationId': value['selectedOrganizationId'],
    };
}

