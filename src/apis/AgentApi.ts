/* tslint:disable */
/* eslint-disable */
/**
 * Sofia Pegasus ai-api
 * Api do sistema Pegasus com endpoints para interação com os modelos de AI usados no sistema.
 *
 * The version of the OpenAPI document: 1.5.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AgentProcessingRequestBodyDto,
  AgentReplyEntity,
  AgentRequestBodyDto,
  ExceptionResponseEntity,
} from '../models/index';
import {
    AgentProcessingRequestBodyDtoFromJSON,
    AgentProcessingRequestBodyDtoToJSON,
    AgentReplyEntityFromJSON,
    AgentReplyEntityToJSON,
    AgentRequestBodyDtoFromJSON,
    AgentRequestBodyDtoToJSON,
    ExceptionResponseEntityFromJSON,
    ExceptionResponseEntityToJSON,
} from '../models/index';

export interface ProcessingReplyRequest {
    agentProcessingRequestBodyDto: AgentProcessingRequestBodyDto;
}

export interface ReplyRequest {
    agentRequestBodyDto: AgentRequestBodyDto;
}

/**
 * AgentApi - interface
 * 
 * @export
 * @interface AgentApiInterface
 */
export interface AgentApiInterface {
    /**
     * 
     * @summary Gera mensagem falando que está processando a última solicitação do usuário.
     * @param {AgentProcessingRequestBodyDto} agentProcessingRequestBodyDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentApiInterface
     */
    processingReplyRaw(requestParameters: ProcessingReplyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentReplyEntity>>;

    /**
     * Gera mensagem falando que está processando a última solicitação do usuário.
     */
    processingReply(requestParameters: ProcessingReplyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentReplyEntity>;

    /**
     * 
     * @summary Responde a última mensagem enviada pelo usuário.
     * @param {AgentRequestBodyDto} agentRequestBodyDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentApiInterface
     */
    replyRaw(requestParameters: ReplyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AgentReplyEntity>>>;

    /**
     * Responde a última mensagem enviada pelo usuário.
     */
    reply(requestParameters: ReplyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AgentReplyEntity>>;

}

/**
 * 
 */
export class AgentApi extends runtime.BaseAPI implements AgentApiInterface {

    /**
     * Gera mensagem falando que está processando a última solicitação do usuário.
     */
    async processingReplyRaw(requestParameters: ProcessingReplyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentReplyEntity>> {
        if (requestParameters['agentProcessingRequestBodyDto'] == null) {
            throw new runtime.RequiredError(
                'agentProcessingRequestBodyDto',
                'Required parameter "agentProcessingRequestBodyDto" was null or undefined when calling processingReply().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/internal/agent/processing-reply`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AgentProcessingRequestBodyDtoToJSON(requestParameters['agentProcessingRequestBodyDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AgentReplyEntityFromJSON(jsonValue));
    }

    /**
     * Gera mensagem falando que está processando a última solicitação do usuário.
     */
    async processingReply(requestParameters: ProcessingReplyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentReplyEntity> {
        const response = await this.processingReplyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Responde a última mensagem enviada pelo usuário.
     */
    async replyRaw(requestParameters: ReplyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AgentReplyEntity>>> {
        if (requestParameters['agentRequestBodyDto'] == null) {
            throw new runtime.RequiredError(
                'agentRequestBodyDto',
                'Required parameter "agentRequestBodyDto" was null or undefined when calling reply().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/internal/agent/reply`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AgentRequestBodyDtoToJSON(requestParameters['agentRequestBodyDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AgentReplyEntityFromJSON));
    }

    /**
     * Responde a última mensagem enviada pelo usuário.
     */
    async reply(requestParameters: ReplyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AgentReplyEntity>> {
        const response = await this.replyRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
