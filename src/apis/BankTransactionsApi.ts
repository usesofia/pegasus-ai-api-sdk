/* tslint:disable */
/* eslint-disable */
/**
 * Sofia Pegasus ai-api
 * Api do sistema Pegasus com endpoints para interação com os modelos de AI usados no sistema.
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BankTransactionsBestSuggestedActionEntity,
  ExceptionResponseEntity,
} from '../models/index';
import {
    BankTransactionsBestSuggestedActionEntityFromJSON,
    BankTransactionsBestSuggestedActionEntityToJSON,
    ExceptionResponseEntityFromJSON,
    ExceptionResponseEntityToJSON,
} from '../models/index';

export interface SystemGetBestSuggestedActionRequest {
    bankTransactionId: string;
}

/**
 * BankTransactionsApi - interface
 * 
 * @export
 * @interface BankTransactionsApiInterface
 */
export interface BankTransactionsApiInterface {
    /**
     * 
     * @summary Gera a melhor ação sugerida para a transação bancária.
     * @param {string} bankTransactionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApiInterface
     */
    systemGetBestSuggestedActionRaw(requestParameters: SystemGetBestSuggestedActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankTransactionsBestSuggestedActionEntity>>;

    /**
     * Gera a melhor ação sugerida para a transação bancária.
     */
    systemGetBestSuggestedAction(requestParameters: SystemGetBestSuggestedActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankTransactionsBestSuggestedActionEntity>;

    /**
     * 
     * @summary Gera a melhor ação sugerida para uma nova transação bancária.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApiInterface
     */
    systemGetBestSuggestedActionByNewBankTransactionRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankTransactionsBestSuggestedActionEntity>>;

    /**
     * Gera a melhor ação sugerida para uma nova transação bancária.
     */
    systemGetBestSuggestedActionByNewBankTransaction(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankTransactionsBestSuggestedActionEntity>;

}

/**
 * 
 */
export class BankTransactionsApi extends runtime.BaseAPI implements BankTransactionsApiInterface {

    /**
     * Gera a melhor ação sugerida para a transação bancária.
     */
    async systemGetBestSuggestedActionRaw(requestParameters: SystemGetBestSuggestedActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankTransactionsBestSuggestedActionEntity>> {
        if (requestParameters['bankTransactionId'] == null) {
            throw new runtime.RequiredError(
                'bankTransactionId',
                'Required parameter "bankTransactionId" was null or undefined when calling systemGetBestSuggestedAction().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/internal/bank-transactions/{bankTransactionId}/best-suggested-action`;
        urlPath = urlPath.replace(`{${"bankTransactionId"}}`, encodeURIComponent(String(requestParameters['bankTransactionId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BankTransactionsBestSuggestedActionEntityFromJSON(jsonValue));
    }

    /**
     * Gera a melhor ação sugerida para a transação bancária.
     */
    async systemGetBestSuggestedAction(requestParameters: SystemGetBestSuggestedActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankTransactionsBestSuggestedActionEntity> {
        const response = await this.systemGetBestSuggestedActionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gera a melhor ação sugerida para uma nova transação bancária.
     */
    async systemGetBestSuggestedActionByNewBankTransactionRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankTransactionsBestSuggestedActionEntity>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/internal/bank-transactions/best-suggested-action`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BankTransactionsBestSuggestedActionEntityFromJSON(jsonValue));
    }

    /**
     * Gera a melhor ação sugerida para uma nova transação bancária.
     */
    async systemGetBestSuggestedActionByNewBankTransaction(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankTransactionsBestSuggestedActionEntity> {
        const response = await this.systemGetBestSuggestedActionByNewBankTransactionRaw(initOverrides);
        return await response.value();
    }

}
